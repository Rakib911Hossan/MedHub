import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart'; 
import 'package:new_project/users/edit_profile.dart';
import 'dart:math';

class Users extends StatelessWidget {
  const Users({Key? key});

  Color getRandomColor() {
  // Generates a random color using the Random class
  Random random = Random();
  return Color.fromRGBO(
    random.nextInt(256), // Red value (0-255)
    random.nextInt(256), // Green value (0-255)
    random.nextInt(256), // Blue value (0-255)
    1.0, // Full opacity
  );
}


  @override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('Users'),
    ),
    body: StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance.collection('user_info').snapshots(),
      builder: (context, snapshot) {
        // Check for loading state
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        // Handle errors
        if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        }

        // If no data exists in the collection
        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return const Center(child: Text('No users available.'));
        }

        // Get the list of user documents from Firestore
        var users = snapshot.data!.docs;

        return ListView.builder(
          itemCount: users.length,
          itemBuilder: (context, index) {
            var user = users[index].data() as Map<String, dynamic>; // Convert to Map
            var userId = users[index].id; // Get the document ID (userId)

            return Card(
              elevation: 3,
              margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
              child: ListTile(
                leading: CircleAvatar(
  radius: 22.5, // Adjust the size
  child: Text(
    user['email']?.substring(0, 1).toUpperCase() ?? 'N', // First letter of email
    style: const TextStyle(
      fontSize: 24, // Adjust font size
      fontWeight: FontWeight.bold,
      color: Colors.white, // Text color inside the circle
    ),
  ),
  backgroundColor: getRandomColor(), // Random background color
),

                title: Text(user['name'] ?? 'Unknown User'),
                subtitle: Text(user['email'] ?? 'No email provided'),
                trailing: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    IconButton(
                                            icon: const Icon(
                                              Icons.edit,
                                              color: Color.fromARGB(255, 3, 73, 5),
                                            ),
                      onPressed: () {
                        // Navigate to the EditProfileScreen with the user's data
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => EditProfileScreen(
                              userData: user, // Pass user data to the EditProfileScreen
                            ),
                          ),
                        );
                      },
                    ),
                    IconButton(
                                            icon: const Icon(
                                              Icons.delete,
                                              color: Color.fromARGB(255, 221, 128, 121),
                                            ),
                      onPressed: () {
                        // Show confirmation dialog
                        showDialog(
                          context: context,
                          builder: (BuildContext context) {
                            return AlertDialog(
                              title: const Text('Confirm Deletion'),
                              content: const Text('Are you sure you want to delete this user?'),
                              actions: <Widget>[
                                TextButton(
                                  child: const Text('Cancel'),
                                  onPressed: () {
                                    Navigator.of(context).pop(); // Close the dialog
                                  },
                                ),
                                TextButton(
                                  child: const Text('Delete'),
                                  onPressed: () {
                                    // Call delete method
                                    _deleteUser(userId, context);

                                    // Close the dialog
                                    Navigator.of(context).pop();
                                  },
                                ),
                              ],
                            );
                          },
                        );
                      },
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    ),
  );
}

void _deleteUser(String userId, BuildContext context) async {
  try {
    // Attempt to delete the user from Firestore
    await FirebaseFirestore.instance.collection('user_info').doc(userId).delete();
    
    // Show a success message after the deletion
    Future.delayed(Duration(milliseconds: 500), () {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('User deleted successfully')),
      );
    });
    
  } catch (e) {
    // Handle any errors during the deletion process
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Error deleting user: $e')),
    );
  }
}



}
